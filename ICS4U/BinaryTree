
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class BinaryTree {

	private static ArrayList<Node> tree = new ArrayList<Node>();
	
	private static Node n0 = new Node("100% OJ", 0);
	private static Node n1 = new Node("Anthony", 10);
	private static Node n2 = new Node("B flat", 20);
	private static Node n3 = new Node("Charlie", 30);
	private static Node n4 = new Node("Dorothea", 40);
	private static Node n5 = new Node("Egg", 50);
	private static Node n6 = new Node("Fluoride", 60);
	
	private static final String[] LVSR = {"Left", "Right", "Back", "Stop"};
	
	
public static void main(String args[]){

	String[] rvsa = {"Reference", "Array"};
	int q = JOptionPane.showOptionDialog(null, "Pick a type", "CHOOSE", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, rvsa, -1);
	
	
	if (q == 0){
		refDemo();
		System.out.println(refNavi(n0));
		
	} else if (q == -1) {
		System.exit(0);
	} else {
		arrDemo();
		System.out.println(arrNavi(0));
		
	}
}
	





//REFERENCE
public static void refDemo(){
	n0.left = n1;
	n0.right = n2;
	
	n1.left = n3;
	n1.right = n4;
	
	n2.left = n5;
	n2.right = n6;
	
	System.out.println(refPrint(n0));
	
	System.out.println(refPrint(n1));
}
	
public static String refPrint(Node n){
	String temp = n.toString() + "\n";
	
	if (n.left != null){
		temp += refPrint(n.left);
	}
	
	if (n.right != null){
		temp += refPrint(n.right);
	}
	
	return temp;
}

public static Node refNavi(Node n){
	
	
	for(;;){
		int qr = JOptionPane.showOptionDialog(null, "Enter command", "CHOOSE", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, LVSR, -1);
		
		
		if (qr == 0 && n.left != null) return refNavi(n.left);
		else if (qr == 1 && n.right != null) return refNavi(n.right);
		else if (qr == -1) System.exit(0);
		else if (qr == 2) return null;
		else if (qr == 3 && n != null) return n;
		else JOptionPane.showMessageDialog(null, "No node there");
	}
	
}






//ARRAYS
public static void arrDemo(){
	
	tree.add(n0);
	tree.add(n1);
	tree.add(n2);
	tree.add(n3);
	tree.add(n4);
	tree.add(n5);
	tree.add(n6);
	
	for (Node n:tree){
		System.out.println(n);
	}
	System.out.print("\n");
	
	System.out.println(arrPrint(0));	
}

public static String arrPrint(int index){
	
	String temp = tree.get(index).toString() + "\n";
	
	try {
		temp += arrPrint(2 * index + 1);
	} catch (Exception e) {
		
	}
	
	try {
		temp += arrPrint(2 * index + 2);
	} catch (Exception e) {
		
	}
	
	return temp;
}


public static Node arrNavi(int index){
	
	
	for(;;){
		try {

			int qr = JOptionPane.showOptionDialog(null, "Enter command", "CHOOSE", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, LVSR, -1);
			
			
			switch (qr){
			case 0:
				tree.get(2 * index + 1);
				return arrNavi(2 * index + 1);
			case 1:
				tree.get(2 * index + 2);
				return arrNavi(2 * index + 2);
			case -1:
				System.exit(0);
			case 2:
				tree.get(index - 1);
				return arrNavi((index - 1)/2);
			default:
				return tree.get(index);
			}
			
		} catch (Exception e){
			JOptionPane.showMessageDialog(null, "No node there");
		}	
	}
	
}

}
